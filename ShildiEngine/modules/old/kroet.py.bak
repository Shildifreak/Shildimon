import os
import ConfigParser
import StandartCommands
reload(StandartCommands)

class Interpreter():
    def __init__(self,varset_func = None,objdir = None):
        self.objects = {}
        self.objecttypes = {}
        self.splitcache = {",":{},".":{},"=":{}}
        self.configparser = ConfigParser.ConfigParser()
        self.staticobjparser = ConfigParser.ConfigParser()
        self.staticobjfile = None
        self.filename = None
        self.envvar = []
        self.varset_func = varset_func
        self.objdir = objdir
        if self.objdir == None:
            import os
            self.objdir = "."+os.sep
        self.AdditionalCommandsets = []

    def open(self,filename,defaultfilename):
        if self.configparser.read(filename) == []:
            print "reading default file instead of savefile"
            if self.configparser.read(defaultfilename) == []:
                print "failed reading default file"
        self.filename = filename
        # Listen einrichten für type und landschaft

    def loadobject(self,objectname):
        if self.objects.has_key(objectname):
            return None
        if self.configparser.has_section(objectname):
            self.objects[objectname] = dict(self.configparser.items(objectname))
            return True
        if "@" in objectname:
            if self.staticobjfile != objectname.split("@")[1]:
                fn=os.path.join(self.objdir,objectname.split("@")[1]+".shl")
                self.staticobjparser = ConfigParser.ConfigParser()
                self.staticobjparser.read(fn)
                self.staticobjfile = objectname.split("@")[1]
            if self.staticobjparser.has_section(objectname.split("@")[0]):
                self.objects[objectname] = dict(self.staticobjparser.items(objectname.split("@")[0]))
                return True
        self.objects[objectname] = None
        return False

    def saveNclear(self):
        print("saving data")
        #clear empty attributes
        for objectname,data in self.objects.items():
            if data != None:
                for var,val in data.items():
                    if val == "":
                        if self.configparser.has_section(objectname):
                            self.configparser.remove_option(objectname,var)
                        self.objects[objectname].pop(var)
            else:
                self.objects.pop(objectname)
                if self.configparser.has_section(objectname):
                    self.configparser.remove_section(objectname)
        for objectname,data in self.objects.items():
            # update staticobjparser for later request
            if "@" in objectname:
                if self.staticobjfile != objectname.split("@")[1]:
                    fn=os.path.join(self.objdir,objectname.split("@")[1]+".shl")
                    self.staticobjparser = ConfigParser.ConfigParser()
                    self.staticobjparser.read(fn)
                    self.staticobjfile = objectname.split("@")[1]
            # see if @-object is the same like in file
            if ("@" in objectname and \
                self.staticobjparser.has_section(objectname.split("@")[0]) and \
                data == dict(self.staticobjparser.items(objectname.split("@")[0]))):
                # if so, delete
                if self.configparser.has_section(objectname):
                    self.configparser.remove_section(objectname)
            # all other objects are refreshed
            else:
                if not self.configparser.has_section(objectname):
                    self.configparser.add_section(objectname)
                for var,val in data.items():
                    self.configparser.set(objectname,var,val)
        # and saved to file
        configdatei=open(self.filename, 'wb')
        self.configparser.write(configdatei)
        configdatei.close()
        print("clearing cache")
        self.objects.clear()
        for d in self.splitcache.values():
            d.clear()

    def get_object(self,name):
        obj = self.objects.get(name,None)
        if not obj:
            self.loadobject(name)
            obj = self.objects.get(name,None)
        return obj

    def get_attributelist(self,objekt):
        if not self.objects.has_key(objekt):
            self.loadobject(objekt)
        return self.objects[objekt].keys()

    def get_attribute(self,objekt,attribute,default="",usetypeaction=True):
        if not self.objects.has_key(objekt):
            if not self.loadobject(objekt):
                return default
        if self.objects[objekt] == None:
            return default
        ret = self.objects[objekt].get(attribute,"")
        if ret in [""]:
            if self.objects[objekt].has_key("inherit"):
                return self.get_attribute(self.objects[objekt]["inherit"],attribute)
            return default
        return ret

    def set_attribute(self,objekt,attribute,value):
        if not self.objects.has_key(objekt):
            self.loadobject(objekt)
        if self.varset_func != None:
            valueold = self.get_attribute(objekt,attribute)
            self.varset_func(objekt,attribute,valueold,value)
        self.objects[objekt][attribute] = value

    def getlistattr(self,objekt,attribute,index):
        pass

    def setlistattr(self,objekt,attribute,value,index):
        attributes = self.split(self.get_attribute(objekt,attribute))[:] #copy is important, so we can use inplace editing
        attributes[index] = value
        self.set_attribute(objekt,attribute,self.list2str(attributes))

    def add2listattr(self,objekt,attribute,value,index=None):
        if index == None:
            liststr = self.get_attribute(objekt,attribute)
            if liststr != "":
                liststr += ","
            liststr += value
            self.set_attribute(objekt,attribute,liststr)
        else:
            attributes = self.split(self.get_attribute(objekt,attribute))[:] #copy is important, so we can use inplace editing
            attributes.insert(index,value)
            self.set_attribute(objekt,attribute,self.list2str(attributes))

    def delfromlistattr(self,objekt,attribute,value):
        attributes = self.split(self.get_attribute(objekt,attribute,""))[:] #copy, so we can use remove command (inplace)
        while value in attributes:
            attributes.remove(value)
        self.set_attribute(objekt,attribute,self.list2str(attributes))

    def create_object(self,name):
        if not self.objects.has_key(name):
            self.objects[name] = {}
        else:
            print "Error: object name %s already in use" %name
            return False

    def delete_object(self,name):
        if self.objects.has_key(name):
            self.objects[name] = None

    def split(self,string,char=","):
        """Do not modify resulting list inplace!!!"""
        if not self.splitcache[char].has_key(string):
            self._split(string,char)
        return self.splitcache[char][string]

    def _split(self,string,char):
        #string = string+"" #wozu ist diese Zeile da?
        if char not in string:
            self.splitcache[char][string] = [string]
            return
        b = []; lastindex = 0
        index = string.find(char)
        while index != -1:
            if (string.count('(',lastindex,index) ==
                string.count(')',lastindex,index)): #same for [] and {}
               #(string.count('"',lastindex,index)%2 == 0):
                b.append(string[lastindex:index])
                lastindex = index+1
            index = string.find(char,index+1)
        b.append(string[lastindex:])#+1 / +(lastindex!=0)
        self.splitcache[char][string] = b
        
    def list2str(self,l):
        r = "".join([str(i)+"," for i in l])
        if r.endswith(","):
            r = r[:-1]
        return r

    def execute(self,command,envvar=None,p=False):
        if envvar == None:
            envvar = {}
        if p:
            envvar["print"] = True
            p = False
        if envvar.get("print",False):
            print "command:",command
        try:
            #String
            if command.startswith("\\"):
                if command[1] == "(" and command[-1] == ")":
                    return command[2:-1]
                return command[1:]
            #Shortcuts
            command = StandartCommands.shortcuts.get(command,command)
            #Numbers
            split = self.split(command,".")
            if split[0].isdigit():
                if len(split) == 1:
                    return int(command)
                if len(split) == 2 and split[1].isdigit():
                    return float(command)
                return command
            #Attributes
            elif len(split)!=1:
                objexpr="".join(split[:-1])
                obj=self.execute(objexpr,envvar)
                attr=split[-1]
                return self.get_attribute(obj,attr)
            #Comparison
            split = self.split(command,"=")
            if len(split)!=1:
                return StandartCommands.isequal((self,envvar),
                            *[self.execute(j,envvar) for j in split])
            #Everything not yet proofed except functions
            i = command.find("(")
            if i == -1:
                return command
            #Function calls
            func = command[:i]
            args = self.split(command[i+1:-1])
            if args == [""]:
                args = []
            if StandartCommands.branch.has_key(func):
                branch = StandartCommands.branch[func]
                return branch((self,envvar),*args)
            else:
                args = [self.execute(j,envvar) for j in args]
                function = StandartCommands.commands.get(func,None)
                if function == None:
                    for commandset in self.AdditionalCommandsets:
                        function = commandset.get(func,None)
                        if function != None:
                            break
                if function == None:
                    print "function", func, "not found"
                    function = StandartCommands.dummi
                return function((self,envvar),*args)
        except:
            print "Error executing:", command
            raise

    def new_execute(self,command,envvar={}):
        if envvar.get("print",False):
            print "command:",command
        envvar["wait"] = False
        funcstack = [[""]] # of ["name",arg1,arg2,...]
        isstring = False
        escaped = False
        try:
            for letter in command:
                if escaped:
                    funcstack[-1][0]+=letter
                    escaped = False
                elif letter == "\\":
                    escaped = True
                elif letter == '"':
                    isstring = not isstring
                elif isstring:
                    funcstack[-1][0]+=letter
                else:
                    if letter == "(":
                        funcstack.append([""])
                    elif letter == ",":
                        "sachen wie strings, numbers, = oder . auswerten"
                        funcstack[-1].append("")
                    elif letter == ")":
                        args = funcstack.pop(-1)
                        name = funcstack[-1].pop(-1)
                        result=self.call_function(name,args)
                        funcstack[-1].append(result)
                    elif letter in "=<>":
                        if letter == "=":
                            "testen ob letzter Buchstabe davon in !,<,> war"
                    elif letter in ".":
                        pass
                    else:
                        funcstack[-1][-1]+=letter
                """( -> argumente fangen an (neue function in funcstack)
                , -> nächstes Argument (letzte function ausführen, neue anhängen)
                ) -> letzten 2 functionen ausführen
                = -> davor und danach vergleichen -> vergleichsfunktion anhängen
                . -> attributefunktion anhängen"""
                if envvar["wait"]:
                    "neuen command string aus funcstack erstellen"
                    break
                print funcstack
            return funcstack[0][0]
            #String
            if command.startswith("\\"):
                if command[1] == "(" and command[-1] == ")":
                    return command[2:-1]
                return command[1:]
            #Shortcuts
            command = StandartCommands.shortcuts.get(command,command)
            #Numbers
            split = self.split(command,".")
            if split[0].isdigit():
                if len(split) == 1:
                    return int(command)
                if len(split) == 2 and split[1].isdigit():
                    return float(command)
                return command
            #Attributes
            elif len(split)!=1:
                objexpr="".join(split[:-1])
                obj=self.execute(objexpr,envvar)
                attr=split[-1]
                return self.get_attribute(obj,attr)
            #Comparison
            split = self.split(command,"=")
            if len(split)!=1:
                return StandartCommands.isequal((self,envvar),
                            *[self.execute(j,envvar) for j in split])
            #Everything not yet proofed except functions
            i = command.find("(")
            if i == -1:
                return command
        except:
            print "Error executing:", command
            raise

    def call_function(self,func,args):
        if args == []:
            return func
        else:
            return "".join(args)

        if StandartCommands.branch.has_key(func):
            branch = StandartCommands.branch[func]
            return branch((self,envvar),*args)
        else:
            args = [self.execute(j,envvar) for j in args]
            function = StandartCommands.commands.get(func,None)
            if function == None:
                for commandset in self.AdditionalCommandsets:
                    function = commandset.get(func,None)
                    if function != None:
                        break
            if function == None:
                print "function", func, "not found"
                function = StandartCommands.dummi
            return function((self,envvar),*args)


if __name__ == "__main__":
    I = Interpreter()
    #print I.split("test1")
    #print I.split("test2(bla,bli,blub)")
    #print I.split("var(envvar(\object),\position)")
    #print I.split("")
    I.new_execute('mul(3,2,mul(4,5))')
    I.new_execute('mul(2,3)=mul(3,2)')
    #tmpoffsetfunc(var(envvar(\object),\position))
